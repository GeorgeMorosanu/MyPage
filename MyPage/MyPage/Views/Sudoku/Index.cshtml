
@{
    ViewData["Title"] = "Index";
}
    <div class="container-fluid padding-top-increased">

        <div class="row">
            <div id="Buttons" class="col-lg-2 col-md-12 padding-left-right-none">

                <div class="row">
                    <div class="col-xs-6">
                        <div id="Rules">
                            <button type="button" class="btn btn-outline-info" data-toggle="modal" data-target="#myModal">Rules</button>
                            <br />

                            <!-- Rules -->
                            <div class="modal fade" id="myModal" role="dialog">
                                <div class="modal-dialog">

                                    <div class="modal-content fontSize18">
                                        <div class="modal-header">
                                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                                            <p class="modal-title text-center"><b><i>Sudoku: Rules</i></b></p>
                                        </div>
                                        <div class="modal-body">
                                            <p>Your target is to complete the entire puzzle.</p>
                                            <br />
                                            <p>The rules are very simple:</p>
                                            <p>You have to fill in the numbers 1-9 exactly once in every <b>Line</b>, <b>Column</b> and <b>3x3 Region</b>. </p>
                                            <p>That's it!</p>
                                            <br />
                                            <p>To make it easier for you, I added a <b>Hint!</b> button, which you can use 3 times in a game. This button will reveal the correct answer for a chosen spot or for a random one (in case no spot was selected).</p>
                                            <p>
                                                Furthermore, I have included an option where you can see the <b><i>Possibilities</i></b> for a chosen spot in your Puzzle.
                                                You can either write the answer down, or press any button from this section.
                                            </p>
                                            <br />
                                            <p>You can choose between 3 levels of difficulty, the default one being Medium. If you want to complete a different difficulty, the application won't make a new puzzle.</p>
                                            <p>To do so, you will have to either refresh the page, or to press the <b>Remake</b> button on the bottom of the page.</p>
                                            <p>However, if you can't figure out the right solution (or you are in a hurry), you can just press the <b><i>Solve</i></b> button.</p>

                                            <br />
                                            <p>The initial given numbers will look like this: <span class="given fontSize20">1</span>, <span class="given fontSize20">2</span>, <span class="given fontSize20 fontSize20">3</span>, ... and their background will be gray.</p>
                                            <p>Once a solution is found for a spot, it will turn to <span class="great fontSize20">this color</span>. It's background will turn into gray as well.</p>
                                            
                                            <p>The final solution is generated based on an algorithm, and it is locked.</p>
                                            <p>So if you find a solution that doesn't match the generated solution, it is ok. The number of <span class="wrong fontSize20">Mistakes</span> will not increase unless you really made an wrong decision.</p>
                                        </div>
                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-6">
                        <div id="Hints">
                            <input type="button" class="btn btn-outline-primary" value="Hint! (3 left)" onclick="useHint();" />
                        </div>
                    </div>
                </div>

                <br />
                <div class="row">
                    <div class="col-xs-6 col-md-12">
                        <div id="Mistakes">Mistakes: 0</div>
                    </div>
                    <div class="col-xs-6 col-md-12">
                        <div id="Type">Type: Medium</div>
                    </div>
                    <div class="col-xs-12">
                        <div id="TimeWatch">TimeWatch: 00:00:00</div>
                    </div>
                </div>
                
            </div>
            <div class="col-lg-8 col-md-12">
                <div id="Sudoku"></div>
            </div>
            <div class="col-lg-2 col-md-12 padding-left-right-none">
                <div class="text-center">
                    <span class="fontSizeTextOnMobile"> Display Possibilities </span><span class="display-on-phone"><br /></span> 
                    <label class="switch">
                        <input type="checkbox" checked onclick="changePossibilityVisibility()">
                        <span class="slider round"></span>
                    </label>

                    <br />

                    <div id="Possibilities" class="visible"></div>

                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-2"></div>
            <div class="col-xs-12 col-lg-8">
                <div class="padding-left-right-increased">
                    <div class="row text-center">
                        <span class="display-on-phone"><br /></span>
                        <p class="fontSizeTextOnMobile">Choose a difficulty:</p>
                        <div class="col-xs-4">
                            <button id="easyMode" type="button" class="btn btn-outline-success">Easy</button>
                        </div>
                        <div class="col-xs-4">
                            <button id="mediumMode" type="button" class="btn btn-outline-warning">Medium</button>
                        </div>
                        <div class="col-xs-4">
                            <button id="hardMode" type="button" class="btn btn-outline-danger">Hard</button>
                        </div>
                    </div>

                    <div class="row text-center padding-top-increased">
                        <p class="fontSizeTextOnMobile">Available options:</p>
                        <div class="col-xs-6">
                            <button id="remake" type="button" class="btn btn-outline-primary" onclick="remakeSudoku();">Remake</button>
                        </div>
                        <div class="col-xs-6">
                            <button id="solve" type="button" class="btn btn-outline-dark" onclick="printSolution();">Solve</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-2"></div>
           
        </div>

    </div>

<script>

    var SudokuSolution = [];
    var generalBreak = 0;
    var lastPossition = " ";

    function changePossibilityVisibility() {
        if (document.getElementById("Possibilities").classList.contains("invisible") == true) {
            document.getElementById("Possibilities").classList.remove("invisible");
        }
        else {
            document.getElementById("Possibilities").classList.add("invisible");
        }
    }

        function generateSolution() {
            this.generalBreak = 0;

            var generalFailedAttempts = 0;

            for (var i = 0; i < 9; i++) {
                if (this.generalBreak == 1) {
                    // Remake
                    break;
                }
                for (var j = 0; j < 9; j++) {
                    var possibleElements = getListOfAvailableOptions(i, j);

                    if (possibleElements.length == 0) {
                        generalFailedAttempts++;
                        j = 0;
                        removeLine(i);
                        i--;
                        break;
                    }


                    var ok = 0,
                        noAttepts = 0;

                    while (ok == 0) {
                        ok = 1;

                        // To many failed attempts leads to remaking the line
                        if (noAttepts > 50) {
                            removeLine(i);
                            i--;
                            break;
                        }

                        var randomPosition = getRandomElement(possibleElements.length);
                        var possibleChoice = possibleElements[randomPosition];
                        this.SudokuSolution[i][j] = possibleChoice;

                        if (checkPosition(i, j) == 0) {
                            ok = 0;
                            noAttepts++;
                            generalFailedAttempts++;
                        }

                        if (generalFailedAttempts >= 5000) {
                            this.generalBreak = 1;
                            break;
                        }
                    }
                }
            }

        }

        function removeLine(x) {
            for (var i = 0; i < 9; i++) {
                this.SudokuSolution[x][i] = 0;
            }
        }


        function getRandomElement(maxindex) {
            return Math.floor((Math.random() * 100) % maxindex);
        }

        function checkPosition(i, j) {
            if (checkLine(i) == 1 &&
                checkColumn(j) == 1 &&
                checkRegion(i, j) == 1)
                return 1;
            return 0;
        }

        function checkLine(x) {
            var myList = [];
            for (var i = 0; i < 9; i++) {
                myList.push(this.SudokuSolution[x][i]);
            }
            return !checkDuplicatesInList(myList);
        }

        function checkColumn(x) {
            var myList = [];
            for (var i = 0; i < 9; i++) {
                myList.push(this.SudokuSolution[i][x]);
            }
            return !checkDuplicatesInList(myList);
        }

        function checkRegion(x, y) {
            var myList = [];

            var initialI = 0,
                finalI = 0,
                initialJ = 0,
                finalJ = 0;

            if (x < 3) {
                initialI = 0;
                finalI = 3;
            }
            else if (x < 6) {
                initialI = 3;
                finalI = 6;
            }
            else {
                initialI = 6;
                finalI = 9;
            }

            if (y < 3) {
                initialJ = 0;
                finalJ = 3;
            }
            else if (y < 6) {
                initialJ = 3;
                finalJ = 6;
            }
            else {
                initialJ = 6;
                finalJ = 9;
            }

            for (var i = initialI; i < finalI; i++) {
                for (var j = initialJ; j < finalJ; j++) {
                    myList.push(this.SudokuSolution[i][j]);
                }
            }

            return !checkDuplicatesInList(myList);
        }

        function checkDuplicatesInList(myList) {
            for (var i = 0; i < 8; i++) {
                for (var j = i + 1; j < 9; j++) {
                    if (i != j &&
                        myList[i] != 0 &&
                        myList[j] != 0) {
                        // If there are duplicates - line
                        if (myList[i] == myList[j]) {
                            // 1 = there are duplicates
                            return 1;
                        }
                    }
                }
            }
            // 0 - no duplicates
            return 0;
        }

        //Checked
        function getListOfAvailableOptions(x, y) {
            var returnedList = [1, 2, 3, 4, 5, 6, 7, 8, 9];
            var initialI = 0,
                finalI = 0,
                initialJ = 0,
                finalJ = 0;

            if (x < 3) {
                initialI = 0;
                finalI = 3;
            }
            else if (x < 6) {
                initialI = 3;
                finalI = 6;
            }
            else {
                initialI = 6;
                finalI = 9;
            }

            if (y < 3) {
                initialJ = 0;
                finalJ = 3;
            }
            else if (y < 6) {
                initialJ = 3;
                finalJ = 6;
            }
            else {
                initialJ = 6;
                finalJ = 9;
            }

            // Region
            for (var i = initialI; i < finalI; i++) {
                for (var j = initialJ; j < finalJ; j++) {
                    if (this.SudokuSolution[i][j] != 0) {
                        var index = returnedList.indexOf(this.SudokuSolution[i][j]);
                        if (index > -1) {
                            returnedList.splice(index, 1);
                        }
                    }
                }
            }

            // Column
            for (var i = 0; i < 9; i++) {
                if (this.SudokuSolution[x][i] != 0) {
                    var index = returnedList.indexOf(this.SudokuSolution[x][i]);
                    if (index > -1) {
                        returnedList.splice(index, 1);
                    }
                }
            }

            // Column
            for (var i = 0; i < 9; i++) {
                if (this.SudokuSolution[i][y] != 0) {
                    var index = returnedList.indexOf(this.SudokuSolution[i][y]);
                    if (index > -1) {
                        returnedList.splice(index, 1);
                    }
                }
            }
            return returnedList;
        }

        function printSolution() {
            var text = "<table>";
            for (var i = 0; i < 9; i++) {
                text = text + "<tr>";
                for (var j = 0; j < 9; j++) {
                    this.SudokuPuzzle[i][j] == this.SudokuSolution[i][j];
                    text = text + "<td><input id=\"lc" + i + j + "\" maxlength=\"1\" class=\"input-normal given\" type=\"text\" value=\"" + this.SudokuSolution[i][j] + "\" disabled></td>";
                }
                text = text + "</tr>";
            }
            text = text + "</table>";
            document.getElementById("Sudoku").innerHTML = text;
            this.SudokuSolved = 1;
        }

        function createSolution() {
            //initializing with 0;
            for (var i = 0; i < 9; i++) {
                this.SudokuSolution[i] = []
                for (var j = 0; j < 9; j++) {
                    this.SudokuSolution[i][j] = 0;
                }
            }

            generateSolution();

            if (this.generalBreak == 1) {
                while (this.generalBreak == 1) {
                    //remaking the sudoku;
                    for (var k = 0; k < 9; k++) {
                        removeLine(k);
                    }
                    generateSolution();
                }
            }

        }

        //Creating the Solution
        createSolution();
        //Printing the Possibilities
        printPossibilities([]);

        function printSudoku() {
            var text = "<table>";
            for (var i = 0; i < 9; i++) {
                text = text + "<tr>";
                for (var j = 0; j < 9; j++) {
                    if (this.SudokuPuzzle[i][j] != 0) {
                        text = text + "<td><input id=\"lc" + i + j + "\" maxlength=\"1\" class=\"input-normal given\" type=\"text\" value=\"" + this.SudokuPuzzle[i][j] + "\" disabled></td>";
                    }
                    else {
                        text = text + "<td><input id=\"lc" + i + j + "\" maxlength=\"1\" class=\"input-normal\" type=\"text\" value=\"\" onChange=\"updateSudoku()\" onClick=\"highlightPossibilities()\"></td>";
                    }
                }
                text = text + "</tr>";
            }
            text = text + "</table>";
            document.getElementById("Sudoku").innerHTML = text;
        }

        var SudokuPuzzle = [];
        var mistakes = 0;
        var hints = 3;
        var starttime = Date.now();
        var SudokuSolved = 0;

        //initializing with 0;
        function resetPuzzle() {
            for (var i = 0; i < 9; i++) {
                this.SudokuPuzzle[i] = []
                for (var j = 0; j < 9; j++) {
                    this.SudokuPuzzle[i][j] = 0;
                }
            }
        }

        refreshTimeWatch();

        function refreshTimeWatch() {

            var seconds = Math.floor((Date.now() - starttime) / 1000);

            // console.log(seconds);

            document.getElementById("TimeWatch").innerHTML = "TimeWatch: " + timeFormat(seconds);

            if (this.SudokuSolved == 0) {
                setTimeout(refreshTimeWatch, 1000);
            }


        }

        function timeFormat(timeInSeconds) {

            var Hours = Math.floor(timeInSeconds / 3600);

            var Minutes = Math.floor((timeInSeconds - Hours * 3600) / 60);

            var Seconds = timeInSeconds - Hours * 3600 - Minutes * 60;

            if (Hours < 10) {
                Hours = "0" + Hours;
            }
            if (Minutes < 10) {
                Minutes = "0" + Minutes;
            }
            if (Seconds < 10) {
                Seconds = "0" + Seconds;
            }
            return Hours + ':' + Minutes + ':' + Seconds;
        }




        document.getElementById("easyMode").addEventListener("click", function () {
            easyModeOn();
        });

        document.getElementById("mediumMode").addEventListener("click", function () {
            mediumModeOn();
        });

        document.getElementById("hardMode").addEventListener("click", function () {
            hardModeOn();
        });
        document.getElementById("solve").addEventListener("click", function () {
            printSolution();

            // console.log(this.SudokuSolved);

            this.SudokuSolved = 1;

            // console.log(this.SudokuSolved);
        });
        document.getElementById("remake").addEventListener("click", function () {
            remakeSudoku();
        });



        function easyModeOn() {
            easy();
            printSudoku();

            document.getElementById("Type").innerHTML = "Type: Easy";
            this.mistakes = 0;
            this.hints = 3;
            this.starttime = Date.now();

            this.SudokuSolved = 0;
            refreshTimeWatch();
            updateMistakes();
            updateHints;


        }

        function mediumModeOn() {
            medium();
            printSudoku();

            document.getElementById("Type").innerHTML = "Type: Medium";
            this.mistakes = 0;
            this.hints = 3;
            this.starttime = Date.now();

            this.SudokuSolved = 0;
            refreshTimeWatch();
            updateMistakes();
            updateHints;
        }

        function hardModeOn() {
            hard();
            printSudoku();

            document.getElementById("Type").innerHTML = "Type: Hard";
            this.mistakes = 0;
            this.hints = 3;
            this.starttime = Date.now();

            this.SudokuSolved = 0;
            refreshTimeWatch();
            updateMistakes();
            updateHints;
        }

        function easy() {
            resetPuzzle();
            var NoGivenElements = 34,
                randI,
                randJ,
                ok;
            for (var i = 0; i < NoGivenElements; i++) {
                ok = 0;
                while (ok == 0) {
                    randI = getRandomElement(9);
                    randJ = getRandomElement(9);
                    if (this.SudokuPuzzle[randI][randJ] == 0) {
                        ok = 1;
                        this.SudokuPuzzle[randI][randJ] = this.SudokuSolution[randI][randJ];
                    }
                }
            }
        }

        function medium() {
            resetPuzzle();
            var NoGivenElements = 26,
                randI,
                randJ,
                ok;
            for (var i = 0; i < NoGivenElements; i++) {
                ok = 0;
                while (ok == 0) {
                    randI = getRandomElement(9);
                    randJ = getRandomElement(9);
                    if (this.SudokuPuzzle[randI][randJ] == 0) {
                        ok = 1;
                        this.SudokuPuzzle[randI][randJ] = this.SudokuSolution[randI][randJ];
                    }
                }
            }
        }

        function hard() {
            resetPuzzle();
            var NoGivenElements = 18,
                randI,
                randJ,
                ok;
            for (var i = 0; i < NoGivenElements; i++) {
                ok = 0;
                while (ok == 0) {
                    randI = getRandomElement(9);
                    randJ = getRandomElement(9);
                    if (this.SudokuPuzzle[randI][randJ] == 0) {
                        ok = 1;
                        this.SudokuPuzzle[randI][randJ] = this.SudokuSolution[randI][randJ];
                    }
                }
            }

        }

        function remakeSudoku() {
            document.getElementById("Sudoku").innerHTML = "";

            createSolution();
            generateSudoku();

            document.getElementById("Type").innerHTML = "Type: Medium";

            this.starttime = Date.now();

            this.SudokuSolved = 0;
            refreshTimeWatch();
            updateMistakes();
            updateHints;
        }

        function generateSudoku() {
            medium();
            printSudoku();
        }

        //Generating the current Sudoku [the displayed puzzle]
        generateSudoku();


    var chosenTarget="";

    function placePossibility() {
        var chosenPossibility = event.target.id[event.target.id.length - 1];
        if (this.lastPossition != " ") {
            document.getElementById(this.lastPossition).value = chosenPossibility;
            this.chosenTarget = document.getElementById(this.lastPossition)
            //console.log(this.chosenTarget);
            updateSudoku();
        }

    }

    // onChange
    function updateSudoku() {

        var target = event.target;

        
        if (chosenTarget != "") {
            target = this.chosenTarget;
            chosenTarget = "";
        }
        //console.log(target);

        if (target.value < '1' || target.value > '9') {
            target.value = "";
            this.SudokuPuzzle[target.id[2]][target.id[3]] = 0;

             document.getElementById(target.id).classList.remove("good");
                document.getElementById(target.id).classList.remove("wrong");
                document.getElementById(target.id).classList.remove("great");
        }
        else {
            this.SudokuPuzzle[target.id[2]][target.id[3]] = parseInt(target.value);

            //checking the Correctness

            // Blue = Correct & match my solution
            // Green = Correct BUT doesn't match my solution
            // Red = Wrong
            
            var checkThisPosition = checkPositionInMyAttempt(parseInt(target.id[2]), parseInt(target.id[3]));

            if (checkThisPosition == 2) {
                // Great! The correct solution
                // Locking the position
                
                document.getElementById(target.id).classList.remove("good");
                document.getElementById(target.id).classList.remove("wrong");
                document.getElementById(target.id).classList.add("great");

                document.getElementById(target.id).disabled = true;
                
            }
            else if (checkThisPosition == 1) {
                // GOOD, but not Perfect
                // No mistake added
                
                document.getElementById(target.id).classList.remove("wrong");
                document.getElementById(target.id).classList.remove("great");
                document.getElementById(target.id).classList.add("good");
            }
            else {
                // WRONG
                // Mistake added

                this.mistakes++;

                document.getElementById(target.id).classList.remove("good");
                document.getElementById(target.id).classList.remove("great");
                document.getElementById(target.id).classList.add("wrong");

                updateMistakes();

            }
        }

        clearhighLight();
        clearPossibilities();

    }
    function updateMistakes() {
         document.getElementById("Mistakes").innerHTML = "Mistakes: "+mistakes;
    }

    function updateHints() {
        document.getElementById("Hints").innerHTML = "<input type=\"button\" class=\"btn btn-outline-primary\" value=\"Hint! (" + this.hints + " left)\" onclick=\"useHint();\" />"
    }

    function useHint() {
        console.log(this.lastPossition);
        if (this.hints > 0) {
            //console.log("Hint used!");
            this.hints--;
            updateHints();

            var helped = 0;
                if (this.lastPossition != " " &&
                    this.SudokuPuzzle[this.lastPossition[2]][this.lastPossition[3]] != this.SudokuSolution[this.lastPossition[2]][this.lastPossition[3]]) {

                    this.SudokuPuzzle[this.lastPossition[2]][this.lastPossition[3]] = this.SudokuSolution[this.lastPossition[2]][this.lastPossition[3]];

                    document.getElementById("lc"+this.lastPossition[2]+this.lastPossition[3]).value = this.SudokuSolution[this.lastPossition[2]][this.lastPossition[3]];
                    this.chosenTarget = document.getElementById("lc"+this.lastPossition[2]+this.lastPossition[3])

                    updateSudoku();

                    helped = 1;
                }
            
            while (helped == 0) {

                if (helped == 0) {
                    //random
                    var randI = getRandomElement(9);
                    var randJ = getRandomElement(9);

                    if (this.SudokuPuzzle[randI][randJ] != this.SudokuSolution[randI][randJ]) {
                        this.SudokuPuzzle[randI][randJ] = this.SudokuSolution[randI][randJ];

                        document.getElementById("lc"+randI+randJ).value = this.SudokuSolution[randI][randJ];
                        this.chosenTarget = document.getElementById("lc" + randI + randJ);
                        
                        updateSudoku();
                        helped = 1;
                    }
                }
            }

        }
    }

    function checkPositionInMyAttempt(i, j) {
        // It's the match
        if (this.SudokuPuzzle[i][j] == this.SudokuSolution[i][j]) {
            return 2;
        }

        // It's a good call, but it's not the final solution
        if (checkLineInMyAttempt(i) == 1 &&
            checkColumnInMyAttempt(j) == 1 &&
            checkRegionInMyAttempt(i, j) == 1)
            return 1;

        // It's a bad ball
        return 0;
    }
    function checkLineInMyAttempt(x) {
        var myList = [];
        for (var i = 0; i < 9; i++) {
            myList.push(this.SudokuPuzzle[x][i]);
        }
        return !checkDuplicatesInList(myList);
    }

    function checkColumnInMyAttempt(x) {
        var myList = [];
        for (var i = 0; i < 9; i++) {
            myList.push(this.SudokuPuzzle[i][x]);
        }
        return !checkDuplicatesInList(myList);
    }

    function checkRegionInMyAttempt(x, y) {
        var myList = [];

        var initialI = 0,
            finalI = 0,
            initialJ = 0,
            finalJ = 0;

        if (x < 3) {
            initialI = 0;
            finalI = 3;
        }
        else if (x < 6) {
            initialI = 3;
            finalI = 6;
        }
        else {
            initialI = 6;
            finalI = 9;
        }

        if (y < 3) {
            initialJ = 0;
            finalJ = 3;
        }
        else if (y < 6) {
            initialJ = 3;
            finalJ = 6;
        }
        else {
            initialJ = 6;
            finalJ = 9;
        }

        for (var i = initialI; i < finalI; i++) {
            for (var j = initialJ; j < finalJ; j++) {
                myList.push(this.SudokuPuzzle[i][j]);
            }
        }
        return !checkDuplicatesInList(myList);
    }

    function highlightPossibilities() {

        
        clearhighLight();

        var target = event.target;
        this.lastPossition = event.target.id;
        var line = parseInt(target.id[2]),
            column = parseInt(target.id[3]);
        var possibleElements = getListOfAvailableOptionsForMyAttempt(line, column);

        //Print Possibilities
        //console.log(possibleElements);
        printPossibilities(possibleElements);

        //Highlight targeted zone
        HighlightTargetedZone(line, column);

    }

    function printPossibilities(possibleElements) {
        var text = "";
        var k = 0;
        for (var i = 1; i <= 9; i++) {
            
            text = text + "<div class=\"circleShape";
            if (k < possibleElements.length) {
                if (i == possibleElements[k]) {
                    text = text + " possibility";
                    k++;
                }
            }
            text = text + "\"> <input id=\"Possibility"+i+"\" type=\"button\" class=\"possibilityButton\" value=\"" + i + "\" onClick=\"placePossibility()\"/></div>";
           
        }
        document.getElementById("Possibilities").innerHTML = text;
    }

    function clearPossibilities(){
        var text = "";
         for (var i = 1; i <= 9; i++) {
            text = text + "<div class=\"circleShape\">" + i + "</div>";
        }
        document.getElementById("Possibilities").innerHTML = text;
    }

    function getListOfAvailableOptionsForMyAttempt(x, y) {
        var returnedList = [1, 2, 3, 4, 5, 6, 7, 8, 9];

        var initialI = 0,
            finalI = 0,
            initialJ = 0,
            finalJ = 0;

        if (x < 3) {
            initialI = 0;
            finalI = 3;
        }
        else if (x < 6) {
            initialI = 3;
            finalI = 6;
        }
        else {
            initialI = 6;
            finalI = 9;
        }

        if (y < 3) {
            initialJ = 0;
            finalJ = 3;
        }
        else if (y < 6) {
            initialJ = 3;
            finalJ = 6;
        }
        else {
            initialJ = 6;
            finalJ = 9;
        }

        // Region
        for (var i = initialI; i < finalI; i++) {
            for (var j = initialJ; j < finalJ; j++) {
                if (this.SudokuPuzzle[i][j] != 0) {
                    var index = returnedList.indexOf(this.SudokuPuzzle[i][j]);
                    if (index > -1) {
                        returnedList.splice(index, 1);
                    }
                }
            }
        }

        // Column
        for (var i = 0; i < 9; i++) {
            if (this.SudokuPuzzle[x][i] != 0) {
                    var index = returnedList.indexOf(this.SudokuPuzzle[x][i]);
                    if (index > -1) {
                        returnedList.splice(index, 1);
                    }
                }
        }

        // Column
        for (var i = 0; i < 9; i++) {
            if (this.SudokuPuzzle[i][y] != 0) {
                    var index = returnedList.indexOf(this.SudokuPuzzle[i][y]);
                    if (index > -1) {
                        returnedList.splice(index, 1);
                    }
                }
        }

        return returnedList;
    } 

    function clearhighLight() {
        for (var i = 0; i < 9; i++) {
                for (var j = 0; j < 9; j++) {
                    document.getElementById("lc" + i + j).classList.remove("highlightZone");
                }
        }
    }

    function HighlightTargetedZone(x, y) {

        var initialI = 0,
            finalI = 0,
            initialJ = 0,
            finalJ = 0;

        if (x < 3) {
            initialI = 0;
            finalI = 3;
        }
        else if (x < 6) {
            initialI = 3;
            finalI = 6;
        }
        else {
            initialI = 6;
            finalI = 9;
        }

        if (y < 3) {
            initialJ = 0;
            finalJ = 3;
        }
        else if (y < 6) {
            initialJ = 3;
            finalJ = 6;
        }
        else {
            initialJ = 6;
            finalJ = 9;
        }

        for (var i = initialI; i < finalI; i++) {
            for (var j = initialJ; j < finalJ; j++) {
                document.getElementById("lc" + i + j).classList.add("highlightZone");
            }
        }
        for (var i = 0; i < 9; i++) {
            document.getElementById("lc" + x + i).classList.add("highlightZone");
        }

        for (var i = 0; i < 9; i++) {
            document.getElementById("lc" + i + y).classList.add("highlightZone");
        }


    }

    function checkIfItIsDone() {

         if (this.SudokuSolved == 1) {

            clearhighLight();

            var seconds = Math.floor((Date.now() - starttime) / 1000);

            document.getElementById("TimeWatch").innerHTML = "TimeWatch: " + timeFormat(seconds);
            this.SudokuSolved = 2;
        }

        var done = 1;

        for (var i = 0; i < 9; i++) {
            for (var j = 0; j < 9; j++) {
                if (this.SudokuSolution[i][j] != this.SudokuPuzzle[i][j]) {

                    done = 0;
                    break;
                }
            }
        }
        if (done == 1) {
            this.SudokuSolved = 1;
        }
       
        setTimeout(checkIfItIsDone, 1000);
    }


    checkIfItIsDone();


</script>
