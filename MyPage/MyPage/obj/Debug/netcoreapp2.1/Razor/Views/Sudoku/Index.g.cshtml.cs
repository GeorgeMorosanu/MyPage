#pragma checksum "E:\Projects\MyPage\MyPage\MyPage\Views\Sudoku\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "201a32811c0cf4d02a7b7d5eb79465a6f0c6af88"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Sudoku_Index), @"mvc.1.0.view", @"/Views/Sudoku/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Sudoku/Index.cshtml", typeof(AspNetCore.Views_Sudoku_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "E:\Projects\MyPage\MyPage\MyPage\Views\_ViewImports.cshtml"
using MyPage;

#line default
#line hidden
#line 2 "E:\Projects\MyPage\MyPage\MyPage\Views\_ViewImports.cshtml"
using MyPage.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"201a32811c0cf4d02a7b7d5eb79465a6f0c6af88", @"/Views/Sudoku/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a81ad0979f29c6bc8554041958600b33a1e9bb67", @"/Views/_ViewImports.cshtml")]
    public class Views_Sudoku_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 2 "E:\Projects\MyPage\MyPage\MyPage\Views\Sudoku\Index.cshtml"
  
    ViewData["Title"] = "Index";

#line default
#line hidden
            BeginContext(43, 11582, true);
            WriteLiteral(@"<div>
    <span>Time:</span>
    <span>Mistakes:</span>
</div>
<div>
    Rules
</div>
<div id=""Sudoku""></div>

<div class=""row"">

    <div class=""col-4""><input id=""easyMode"" type=""button"" value=""Easy"" onclick=""easyModeOn();"" /></div>
    <div class=""col-4""><input id=""mediumMode"" type=""button"" value=""Medium"" onclick=""mediumModeOn();""/></div>
    <div class=""col-4""><input id=""hardMode"" type=""button"" value=""Hard"" onclick=""hardModeOn();""/></div>
    <div class=""col-6"">
        <button>Remake</button>
    </div>
    <div class=""col-6"">
        <button>Show Solution</button>
        
    </div>
    <div id=""ShowSolutin"" style=""display:none"">
        You cheater
        <div id=""Solution""></div>
    </div>
</div>
<script>

    var SudokuSolution = [];
    var generalBreak = 0;


    //initializing with 0;
    for (var i = 0; i < 9; i++) {
        this.SudokuSolution[i] = []
        for (var j = 0; j < 9; j++) {
            this.SudokuSolution[i][j] = 0;
        }
    }

    fu");
            WriteLiteral(@"nction generateSolution() {
        this.generalBreak = 0;

        var generalFailedAttempts = 0;

        for (var i = 0; i < 9; i++) {
            if (this.generalBreak == 1) {
                //console.log(""Remake"");
                break;
            }
            for (var j = 0; j < 9; j++) {
                var possibleElements = getListOfAvailableOptions(i, j);

                if (possibleElements.length == 0) {
                    generalFailedAttempts++;
                    j = 0;
                    removeLine(i);
                    i--;
                    break;
                }


                var ok = 0,
                    noAttepts = 0;

                while (ok == 0) {
                    ok = 1;

                    // To many failed attempts leads to remaking the line
                    if (noAttepts > 50) {
                        removeLine(i);
                        i--;
                        break;
                    }

                    ");
            WriteLiteral(@"var randomPosition = getRandomElement(possibleElements.length);
                    var possibleChoice = possibleElements[randomPosition];
                    this.SudokuSolution[i][j] = possibleChoice;

                    if (checkPosition(i, j) == 0) {
                        ok = 0;
                        noAttepts++;
                        generalFailedAttempts++;
                    }

                    if (generalFailedAttempts >= 5000) {
                        this.generalBreak = 1;
                        break;
                    }
                }
            }
        }

    }

    function removeLine(x) {
        for (var i = 0; i < 9; i++) {
            this.SudokuSolution[x][i] = 0;
        }
    }


    function checkSudoku() {
        var ok = 1;
        for (var i = 0; i < 9; i++) {
            for (var j = 0; j < 9; j++) {
                if (checkPosition(i, j) == 0) {
                    ok = 0;
                }
            }
        }
        r");
            WriteLiteral(@"eturn ok;
    }

    function getRandomElement(maxindex) {
        return Math.floor((Math.random() * 100) % maxindex);
    }

    function checkPosition(i, j) {
        if (checkLine(i) == 1 &&
            checkColumn(j) == 1 &&
            checkRegion(i, j) == 1)
            return 1;
        return 0;
    }

    function checkLine(x) {
        var myList = [];
        for (var i = 0; i < 9; i++) {
            myList.push(this.SudokuSolution[x][i]);
        }
        return !checkDuplicatesInList(myList);
    }

    function checkColumn(x) {
        var myList = [];
        for (var i = 0; i < 9; i++) {
            myList.push(this.SudokuSolution[i][x]);
        }
        return !checkDuplicatesInList(myList);
    }

    function checkRegion(x, y) {
        var myList = [];

        var initialI = 0,
            finalI = 0,
            initialJ = 0,
            finalJ = 0;

        if (x < 3) {
            initialI = 0;
            finalI = 3;
        }
        els");
            WriteLiteral(@"e if (x < 6) {
            initialI = 3;
            finalI = 6;
        }
        else {
            initialI = 6;
            finalI = 9;
        }

        if (y < 3) {
            initialJ = 0;
            finalJ = 3;
        }
        else if (y < 6) {
            initialJ = 3;
            finalJ = 6;
        }
        else {
            initialJ = 6;
            finalJ = 9;
        }

        for (i = initialI; i < finalI; i++) {
            for (j = initialJ; j < finalJ; j++) {
                myList.push(this.SudokuSolution[i][j]);
            }
        }

        return !checkDuplicatesInList(myList);
    }

    function checkDuplicatesInList(myList) {
        for (var i = 0; i < 8; i++) {
            for (var j = i + 1; j < 9; j++) {
                if (i != j &&
                    myList[i] != 0 &&
                    myList[j] != 0) {
                    // If there are duplicates - line
                    if (myList[i] == myList[j]) {
                     ");
            WriteLiteral(@"   // 1 = there are duplicates
                        return 1;
                    }
                }
            }
        }
        // 0 - no duplicates
        return 0;
    }

    //Checked
    function getListOfAvailableOptions(i, j) {
        var returnedList = [1, 2, 3, 4, 5, 6, 7, 8, 9];
        var initialI = 0,
            finalI = 0,
            initialJ = 0,
            finalJ = 0;

        if (i < 3) {
            initialI = 0;
            finalI = 3;
        }
        else if (i < 6) {
            initialI = 3;
            finalI = 6;
        }
        else {
            initialI = 6;
            finalI = 9;
        }

        if (j < 3) {
            initialJ = 0;
            finalJ = 3;
        }
        else if (j < 6) {
            initialJ = 3;
            finalJ = 6;
        }
        else {
            initialJ = 6;
            finalJ = 9;
        }

        for (i = initialI; i < finalI; i++) {
            for (j = initialJ; j < finalJ; j++");
            WriteLiteral(@") {
                if (this.SudokuSolution[i][j] != 0) {
                    var index = returnedList.indexOf(this.SudokuSolution[i][j]);
                    if (index > -1) {
                        returnedList.splice(index, 1);
                    }
                }
            }
        }
        return returnedList;
    }

    function printSolution() {
        var text = ""<table>"";
        for (var i = 0; i < 9; i++) {
            text = text + ""<tr>"";
            for (var j = 0; j < 9; j++) {
                text = text + ""<td><input class=\""input-normal\"" type=\""number\"" value=\"""" + this.SudokuSolution[i][j] + ""\""></td>"";
            }
            text = text + ""</tr>"";
        }
        text = text + ""</table>"";
        document.getElementById(""Solution"").innerHTML = text;
    }

    function createSolution() {
        generateSolution();

        if (this.generalBreak == 1) {
            while (this.generalBreak == 1) {
                //remaking the sudoku;
        ");
            WriteLiteral(@"        for (var k = 0; k < 9; k++) {
                    removeLine(k);
                }
                generateSolution();
            }
        }

        printSolution();

    }

    createSolution();

    function printSudoku() {
        var text = ""<table>"";
        for (var i = 0; i < 9; i++) {
            text = text + ""<tr>"";
            for (var j = 0; j < 9; j++) {
                if(this.SudokuPuzzle[i][j]!=0)
                    text = text + ""<td><input class=\""input-normal\"" type=\""number\"" value=\"""" + this.SudokuPuzzle[i][j] + ""\"" disabled></td>"";
                else
                    text = text + ""<td><input class=\""input-normal\"" type=\""number\"" value=\""\""></td>"";
            }
            text = text + ""</tr>"";
        }
        text = text + ""</table>"";
        document.getElementById(""Sudoku"").innerHTML = text;
    }

    var SudokuPuzzle = [];
    //initializing with 0;
    function resetPuzzle() {
        for (var i = 0; i < 9; i++) {
            t");
            WriteLiteral(@"his.SudokuPuzzle[i] = []
            for (var j = 0; j < 9; j++) {
                this.SudokuPuzzle[i][j] = 0;
            }
        }
    }

    document.getElementById(""easyMode"").onclick = easyModeOn();
    document.getElementById(""mediumMode"").onclick = mediumModeOn();
    document.getElementById(""hardMode"").onclick = hardModeOn();

    var easyElement = document.getElementById(""easyMode"");
    if (easyElement.addEventListener)
        easyElement.addEventListener(""click"", easyModeOn, false);
    else if (easyElement.attachEvent)
        easyElement.attachEvent('onclick', easyModeOn);

    var normalElement = document.getElementById(""normalMode"");
    if (normalElement.addEventListener)
        normalElement.addEventListener(""click"", mediumModeOn, false);
    else if (normalElement.attachEvent)
        normalElement.attachEvent('onclick', mediumModeOn);

     var hardElement = document.getElementById(""hardMode"");
    if (hardElement.addEventListener)
        hardElement.addEventL");
            WriteLiteral(@"istener(""click"", hardModeOn, false);
    else if (hardElement.attachEvent)
            hardElement.attachEvent('onclick', hardModeOn);

    function easyModeOn() {
        easy();
        printSudoku;
    }

    function mediumModeOn() {
        medium();
        printSudoku;
    }

    function hardModeOn() {
        hard();
        printSudoku;
    }

    function easy() {
        resetPuzzle();
        var NoGivenElements = 38,
            randI,
            randJ,
            ok;
        for (var i = 0; i < NoGivenElements; i++) {
            ok = 0;
            while (ok == 0) {
                randI = getRandomElement(9);
                randJ = getRandomElement(9);
                if (SudokuPuzzle[randI][randJ] == 0) {
                    ok = 1;
                    SudokuPuzzle[randI][randJ] = SudokuSolution[randI][randJ];
                }
            }
        }
        console.log(""medium"");
        console.log(SudokuPuzzle);
    }

    function medium() {
 ");
            WriteLiteral(@"       resetPuzzle();
        var NoGivenElements = 30,
            randI,
            randJ,
            ok;
        for (var i = 0; i < NoGivenElements; i++) {
            ok = 0;
            while (ok == 0) {
                randI = getRandomElement(9);
                randJ = getRandomElement(9);
                if (SudokuPuzzle[randI][randJ] == 0) {
                    ok = 1;
                    SudokuPuzzle[randI][randJ] = SudokuSolution[randI][randJ];
                }
            }
        } 
        console.log(""normal"");
        console.log(SudokuPuzzle);
    }

    function hard() {
        resetPuzzle();
        var NoGivenElements = 25,
            randI,
            randJ,
            ok;
        for (var i = 0; i < NoGivenElements; i++) {
            ok = 0;
            while (ok == 0) {
                randI = getRandomElement(9);
                randJ = getRandomElement(9);
                if (SudokuPuzzle[randI][randJ] == 0) {
                    ok = 1;
   ");
            WriteLiteral(@"                 SudokuPuzzle[randI][randJ] = SudokuSolution[randI][randJ];
                }
            }
        }
        console.log(""hard"");
        console.log(SudokuPuzzle);
    }

    function generateSudoku() {
        medium();
        printSudoku();
    }

    generateSudoku();

</script>
");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
