#pragma checksum "E:\Projects\MyPage\MyPage\MyPage\Views\Sudoku\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "4ecdbc2c692bf8fa483a426e5ed0f99a8c5db676"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Sudoku_Index), @"mvc.1.0.view", @"/Views/Sudoku/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Sudoku/Index.cshtml", typeof(AspNetCore.Views_Sudoku_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "E:\Projects\MyPage\MyPage\MyPage\Views\_ViewImports.cshtml"
using MyPage;

#line default
#line hidden
#line 2 "E:\Projects\MyPage\MyPage\MyPage\Views\_ViewImports.cshtml"
using MyPage.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4ecdbc2c692bf8fa483a426e5ed0f99a8c5db676", @"/Views/Sudoku/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a81ad0979f29c6bc8554041958600b33a1e9bb67", @"/Views/_ViewImports.cshtml")]
    public class Views_Sudoku_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 2 "E:\Projects\MyPage\MyPage\MyPage\Views\Sudoku\Index.cshtml"
  
    ViewData["Title"] = "Index";

#line default
#line hidden
            BeginContext(43, 24819, true);
            WriteLiteral(@"
    <div id=""Rules"">
        <input type=""button"" value=""Rules"" onclick=""useHint();"" />
    </div>

    <div id=""Hints"">
        <input type=""button"" value=""Hint! (3 left)"" onclick=""useHint();""/>
    </div>

    <div>
        showPossibilities - On/Off
    </div>

<div id=""TimeWatch"">TimeWatch: 00:00:00</div>
<div id=""FinalTime"">Final Time: 00:00:00</div>
<div id=""Mistakes"">Mistakes: 0</div>

<div id=""Type"">
    Type: Medium
</div>


<div class=""text-center"">
    <div id=""Possibilities""></div>
</div>
    <div id=""Sudoku""></div>

<div class=""text-center"">
    <div class=""row"">

        <div class=""col-lg-4""><input id=""easyMode"" type=""button"" value=""Easy"" /></div>
        <div class=""col-lg-4""><input id=""mediumMode"" type=""button"" value=""Medium"" /></div>
        <div class=""col-lg-4""><input id=""hardMode"" type=""button"" value=""Hard"" /></div>
    </div>
    <div class=""row"">
        <div class=""col-lg-6"">
            <input id=""remake"" type=""button"" value=""Remake"" onclick=""remak");
            WriteLiteral(@"eSudoku();"" />
        </div>
        <div class=""col-lg-6"">
            <input id=""solve"" type=""button"" value=""Solve"" onclick=""printSolution();"" />
        </div>
    </div>
</div>

<script>

    var SudokuSolution = [];
    var generalBreak = 0;
    
    function generateSolution() {
        this.generalBreak = 0;

        var generalFailedAttempts = 0;

        for (var i = 0; i < 9; i++) {
            if (this.generalBreak == 1) {
                // Remake
                break;
            }
            for (var j = 0; j < 9; j++) {
                var possibleElements = getListOfAvailableOptions(i, j);

                if (possibleElements.length == 0) {
                    generalFailedAttempts++;
                    j = 0;
                    removeLine(i);
                    i--;
                    break;
                }


                var ok = 0,
                    noAttepts = 0;

                while (ok == 0) {
                    ok = 1;

        ");
            WriteLiteral(@"            // To many failed attempts leads to remaking the line
                    if (noAttepts > 50) {
                        removeLine(i);
                        i--;
                        break;
                    }

                    var randomPosition = getRandomElement(possibleElements.length);
                    var possibleChoice = possibleElements[randomPosition];
                    this.SudokuSolution[i][j] = possibleChoice;

                    if (checkPosition(i, j) == 0) {
                        ok = 0;
                        noAttepts++;
                        generalFailedAttempts++;
                    }

                    if (generalFailedAttempts >= 5000) {
                        this.generalBreak = 1;
                        break;
                    }
                }
            }
        }

    }

    function removeLine(x) {
        for (var i = 0; i < 9; i++) {
            this.SudokuSolution[x][i] = 0;
        }
    }


    func");
            WriteLiteral(@"tion getRandomElement(maxindex) {
        return Math.floor((Math.random() * 100) % maxindex);
    }

    function checkPosition(i, j) {
        if (checkLine(i) == 1 &&
            checkColumn(j) == 1 &&
            checkRegion(i, j) == 1)
            return 1;
        return 0;
    }

    function checkLine(x) {
        var myList = [];
        for (var i = 0; i < 9; i++) {
            myList.push(this.SudokuSolution[x][i]);
        }
        return !checkDuplicatesInList(myList);
    }

    function checkColumn(x) {
        var myList = [];
        for (var i = 0; i < 9; i++) {
            myList.push(this.SudokuSolution[i][x]);
        }
        return !checkDuplicatesInList(myList);
    }

    function checkRegion(x, y) {
        var myList = [];

        var initialI = 0,
            finalI = 0,
            initialJ = 0,
            finalJ = 0;

        if (x < 3) {
            initialI = 0;
            finalI = 3;
        }
        else if (x < 6) {
            ");
            WriteLiteral(@"initialI = 3;
            finalI = 6;
        }
        else {
            initialI = 6;
            finalI = 9;
        }

        if (y < 3) {
            initialJ = 0;
            finalJ = 3;
        }
        else if (y < 6) {
            initialJ = 3;
            finalJ = 6;
        }
        else {
            initialJ = 6;
            finalJ = 9;
        }

        for (var i = initialI; i < finalI; i++) {
            for (var j = initialJ; j < finalJ; j++) {
                myList.push(this.SudokuSolution[i][j]);
            }
        }

        return !checkDuplicatesInList(myList);
    }

    function checkDuplicatesInList(myList) {
        for (var i = 0; i < 8; i++) {
            for (var j = i + 1; j < 9; j++) {
                if (i != j &&
                    myList[i] != 0 &&
                    myList[j] != 0) {
                    // If there are duplicates - line
                    if (myList[i] == myList[j]) {
                        // 1 = there are ");
            WriteLiteral(@"duplicates
                        return 1;
                    }
                }
            }
        }
        // 0 - no duplicates
        return 0;
    }

    //Checked
    function getListOfAvailableOptions(x, y) {
        var returnedList = [1, 2, 3, 4, 5, 6, 7, 8, 9];
        var initialI = 0,
            finalI = 0,
            initialJ = 0,
            finalJ = 0;

        if (x < 3) {
            initialI = 0;
            finalI = 3;
        }
        else if (x < 6) {
            initialI = 3;
            finalI = 6;
        }
        else {
            initialI = 6;
            finalI = 9;
        }

        if (y < 3) {
            initialJ = 0;
            finalJ = 3;
        }
        else if (y < 6) {
            initialJ = 3;
            finalJ = 6;
        }
        else {
            initialJ = 6;
            finalJ = 9;
        }

        // Region
        for (var i = initialI; i < finalI; i++) {
            for (var j = initialJ; j < fina");
            WriteLiteral(@"lJ; j++) {
                if (this.SudokuSolution[i][j] != 0) {
                    var index = returnedList.indexOf(this.SudokuSolution[i][j]);
                    if (index > -1) {
                        returnedList.splice(index, 1);
                    }
                }
            }
        }

        // Column
        for (var i = 0; i < 9; i++) {
            if (this.SudokuSolution[x][i] != 0) {
                    var index = returnedList.indexOf(this.SudokuSolution[x][i]);
                    if (index > -1) {
                        returnedList.splice(index, 1);
                    }
                }
        }

        // Column
        for (var i = 0; i < 9; i++) {
            if (this.SudokuSolution[i][y] != 0) {
                    var index = returnedList.indexOf(this.SudokuSolution[i][y]);
                    if (index > -1) {
                        returnedList.splice(index, 1);
                    }
                }
        }
        return returnedList;
");
            WriteLiteral(@"    }

    function printSolution() {
        var text = ""<table>"";
        for (var i = 0; i < 9; i++) {
            text = text + ""<tr>"";
            for (var j = 0; j < 9; j++) {

                text = text + ""<td><input id=\""lc""+i+j+""\"" maxlength=\""1\"" class=\""input-normal given\"" type=\""text\"" value=\"""" + this.SudokuSolution[i][j] + ""\"" disabled></td>"";
            }
            text = text + ""</tr>"";
        }
        text = text + ""</table>"";
        document.getElementById(""Sudoku"").innerHTML = text;
        this.SudokuSolved = 1;
    }

    function createSolution() {
        //initializing with 0;
        for (var i = 0; i < 9; i++) {
            this.SudokuSolution[i] = []
            for (var j = 0; j < 9; j++) {
                this.SudokuSolution[i][j] = 0;
            }
        }

        generateSolution();

        if (this.generalBreak == 1) {
            while (this.generalBreak == 1) {
                //remaking the sudoku;
                for (var k = 0; k ");
            WriteLiteral(@"< 9; k++) {
                    removeLine(k);
                }
                generateSolution();
            }
        }

    }

    //Creating the Solution
    createSolution();
    //Printing the Possibilities
    printPossibilities([]);

    function printSudoku() {
        var text = ""<table>"";
        for (var i = 0; i < 9; i++) {
            text = text + ""<tr>"";
            for (var j = 0; j < 9; j++) {
                if (this.SudokuPuzzle[i][j] != 0) {
                    text = text + ""<td><input id=\""lc""+i+j+""\"" maxlength=\""1\"" class=\""input-normal given\"" type=\""text\"" value=\"""" + this.SudokuPuzzle[i][j] + ""\"" disabled></td>"";
                }
                else {
                    text = text + ""<td><input id=\""lc""+i+j+""\"" maxlength=\""1\"" class=\""input-normal\"" type=\""text\"" value=\""\"" onChange=\""updateSudoku()\"" onClick=\""highlightPossibilities()\""></td>"";
                }
            }
            text = text + ""</tr>"";
        }
        text = text + ""</ta");
            WriteLiteral(@"ble>"";
        document.getElementById(""Sudoku"").innerHTML = text;
    }

    var SudokuPuzzle = [];
    var mistakes = 0;
    var hints = 3;
    var starttime = Date.now();
    var SudokuSolved = 0;

    //initializing with 0;
    function resetPuzzle() {
        for (var i = 0; i < 9; i++) {
            this.SudokuPuzzle[i] = []
            for (var j = 0; j < 9; j++) {
                this.SudokuPuzzle[i][j] = 0;
            }
        }
    }
    refreshTimeWatch();

    function refreshTimeWatch() {

        var seconds = Math.floor((Date.now() - starttime) / 1000);

        // console.log(seconds);

        document.getElementById(""TimeWatch"").innerHTML = ""TimeWatch: "" + timeFormat(seconds);

        if (this.SudokuSolved == 0) {
            setTimeout(refreshTimeWatch, 1000);
        }
        else {
            break;
        }


    }

     function timeFormat(timeInSeconds) {

        var Hours = Math.floor(timeInSeconds / 3600);

        var Minutes = Math.f");
            WriteLiteral(@"loor((timeInSeconds - Hours*3600)/ 60);

        var Seconds = timeInSeconds - Hours*3600 - Minutes*60;

        if (Hours < 10) {
            Hours = ""0"" + Hours;
        }
        if (Minutes < 10) {
            Minutes = ""0"" + Minutes;
        }
        if (Seconds < 10) {
            Seconds = ""0"" + Seconds;
         }
         return Hours + ':' + Minutes + ':' + Seconds;
    }
     



    document.getElementById(""easyMode"").addEventListener(""click"", function(){
        easyModeOn();
    });

    document.getElementById(""mediumMode"").addEventListener(""click"", function(){
        mediumModeOn();
    });

    document.getElementById(""hardMode"").addEventListener(""click"", function(){
        hardModeOn();
    });
    document.getElementById(""solve"").addEventListener(""click"", function () {
        printSolution();

       // console.log(this.SudokuSolved);

        this.SudokuSolved = 1;

       // console.log(this.SudokuSolved);
    });
    document.getElementById(""rem");
            WriteLiteral(@"ake"").addEventListener(""click"", function(){
        remakeSudoku();
    });



    function easyModeOn() {
        easy();
        printSudoku();

        document.getElementById(""Type"").innerHTML = ""Type: Easy"";
        document.getElementById(""FinalTime"").innerHTML = """";
        this.mistakes = 0;
        this.hints = 3;
        this.starttime = Date.now();

        refreshTimeWatch();
        updateMistakes();
        updateHints;

        
    }

    function mediumModeOn() {
        medium();
        printSudoku();

        document.getElementById(""Type"").innerHTML = ""Type: Medium"";
        document.getElementById(""FinalTime"").innerHTML = """";
        this.mistakes = 0;
        this.hints = 3;
        this.starttime = Date.now();

        refreshTimeWatch();
        updateMistakes();
        updateHints;
    }

    function hardModeOn() {
        hard();
        printSudoku();

        document.getElementById(""Type"").innerHTML = ""Type: Hard"";
        document.get");
            WriteLiteral(@"ElementById(""FinalTime"").innerHTML = """";
        this.mistakes = 0;
        this.hints = 3;
        this.starttime = Date.now();

        refreshTimeWatch();
        updateMistakes();
        updateHints;
    }

    function easy() {
        resetPuzzle();
        var NoGivenElements = 34,
            randI,
            randJ,
            ok;
        for (var i = 0; i < NoGivenElements; i++) {
            ok = 0;
            while (ok == 0) {
                randI = getRandomElement(9);
                randJ = getRandomElement(9);
                if (SudokuPuzzle[randI][randJ] == 0) {
                    ok = 1;
                    SudokuPuzzle[randI][randJ] = SudokuSolution[randI][randJ];
                }
            }
        }
    }

    function medium() {
        resetPuzzle();
        var NoGivenElements = 26,
            randI,
            randJ,
            ok;
        for (var i = 0; i < NoGivenElements; i++) {
            ok = 0;
            while (ok == 0) {
 ");
            WriteLiteral(@"               randI = getRandomElement(9);
                randJ = getRandomElement(9);
                if (SudokuPuzzle[randI][randJ] == 0) {
                    ok = 1;
                    SudokuPuzzle[randI][randJ] = SudokuSolution[randI][randJ];
                }
            }
        } 
    }

    function hard() {
        resetPuzzle();
        var NoGivenElements = 18,
            randI,
            randJ,
            ok;
        for (var i = 0; i < NoGivenElements; i++) {
            ok = 0;
            while (ok == 0) {
                randI = getRandomElement(9);
                randJ = getRandomElement(9);
                if (SudokuPuzzle[randI][randJ] == 0) {
                    ok = 1;
                    SudokuPuzzle[randI][randJ] = SudokuSolution[randI][randJ];
                }
            }
        }
        
    }

    function remakeSudoku() {
        document.getElementById(""Sudoku"").innerHTML = """";

        createSolution();
        generateSudoku();

");
            WriteLiteral(@"        document.getElementById(""Type"").innerHTML = ""Type: Medium"";
        document.getElementById(""FinalTime"").innerHTML = """";
        
        this.starttime = Date.now();

        refreshTimeWatch();
        updateMistakes();
        updateHints;
    }

    function generateSudoku() {
        medium();
        printSudoku();
    }

    //Generating the current Sudoku [the displayed puzzle]
    generateSudoku();


    // onChange
    function updateSudoku() {

        var target = event.target;
        if (target.value < '1' || target.value > '9') {
            target.value = """";
            this.SudokuPuzzle[target.id[2]][target.id[3]] = 0;

             document.getElementById(target.id).classList.remove(""good"");
                document.getElementById(target.id).classList.remove(""wrong"");
                document.getElementById(target.id).classList.remove(""great"");
        }
        else {
            this.SudokuPuzzle[target.id[2]][target.id[3]] = parseInt(target.value);");
            WriteLiteral(@"

            //checking the Correctness

            // Blue = Correct & match my solution
            // Green = Correct BUT doesn't match my solution
            // Red = Wrong
            
            var checkThisPosition = checkPositionInMyAttempt(parseInt(target.id[2]), parseInt(target.id[3]));

            if (checkThisPosition == 2) {
                // Great! The correct solution
                // Locking the position
                
                document.getElementById(target.id).classList.remove(""good"");
                document.getElementById(target.id).classList.remove(""wrong"");
                document.getElementById(target.id).classList.add(""great"");

                document.getElementById(target.id).disabled = true;
                
            }
            else if (checkThisPosition == 1) {
                // GOOD, but not Perfect
                // No mistake added
                
                document.getElementById(target.id).classList.remove(""wrong"");");
            WriteLiteral(@"
                document.getElementById(target.id).classList.remove(""great"");
                document.getElementById(target.id).classList.add(""good"");
            }
            else {
                // WRONG
                // Mistake added

                this.mistakes++;

                document.getElementById(target.id).classList.remove(""good"");
                document.getElementById(target.id).classList.remove(""great"");
                document.getElementById(target.id).classList.add(""wrong"");

                updateMistakes();

            }
        }

        clearhighLight();
        clearPossibilities();

    }
    function updateMistakes() {
         document.getElementById(""Mistakes"").innerHTML = ""Mistakes: ""+mistakes;
    }

    function updateHints() {
        document.getElementById(""Hints"").innerHTML = ""<input type=\""button\"" value=\""Hint! ("" + this.hints + "" left)\"" onclick=\""useHint();\""/>"";
    }

    function useHint() {
        if (this.hints > 0) {
   ");
            WriteLiteral(@"         //console.log(""Hint used!"");
            this.hints--;
            updateHints();
        }
    }

    function checkPositionInMyAttempt(i, j) {
        // It's the match
        if (this.SudokuPuzzle[i][j] == this.SudokuSolution[i][j]) {
            return 2;
        }

        // It's a good call, but it's not the final solution
        if (checkLineInMyAttempt(i) == 1 &&
            checkColumnInMyAttempt(j) == 1 &&
            checkRegionInMyAttempt(i, j) == 1)
            return 1;

        // It's a bad ball
        return 0;
    }
    function checkLineInMyAttempt(x) {
        var myList = [];
        for (var i = 0; i < 9; i++) {
            myList.push(this.SudokuPuzzle[x][i]);
        }
        return !checkDuplicatesInList(myList);
    }

    function checkColumnInMyAttempt(x) {
        var myList = [];
        for (var i = 0; i < 9; i++) {
            myList.push(this.SudokuPuzzle[i][x]);
        }
        return !checkDuplicatesInList(myList);
    }

");
            WriteLiteral(@"    function checkRegionInMyAttempt(x, y) {
        var myList = [];

        var initialI = 0,
            finalI = 0,
            initialJ = 0,
            finalJ = 0;

        if (x < 3) {
            initialI = 0;
            finalI = 3;
        }
        else if (x < 6) {
            initialI = 3;
            finalI = 6;
        }
        else {
            initialI = 6;
            finalI = 9;
        }

        if (y < 3) {
            initialJ = 0;
            finalJ = 3;
        }
        else if (y < 6) {
            initialJ = 3;
            finalJ = 6;
        }
        else {
            initialJ = 6;
            finalJ = 9;
        }

        for (var i = initialI; i < finalI; i++) {
            for (var j = initialJ; j < finalJ; j++) {
                myList.push(this.SudokuPuzzle[i][j]);
            }
        }
        return !checkDuplicatesInList(myList);
    }

    function highlightPossibilities() {

        clearhighLight();

        var targe");
            WriteLiteral(@"t = event.target;
        var line = parseInt(target.id[2]),
            column = parseInt(target.id[3]);
        var possibleElements = getListOfAvailableOptionsForMyAttempt(line, column);

        //Print Possibilities
        //console.log(possibleElements);
        printPossibilities(possibleElements);

        //Highlight targeted zone
        HighlightTargetedZone(line, column);

    }

    function printPossibilities(possibleElements) {
        var text = """";
        var k = 0;
        for (var i = 1; i <= 9; i++) {
            text = text + ""<div class=\""circleShape"";
            if (k < possibleElements.length) {
                if (i == possibleElements[k]) {
                    text = text + "" possibility"";
                    k++;
                }
            }
            text = text + ""\"">"" + i + ""</div>"";
        }
        document.getElementById(""Possibilities"").innerHTML = text;
    }

    function clearPossibilities(){
        var text = """";
         for (var");
            WriteLiteral(@" i = 1; i <= 9; i++) {
            text = text + ""<div class=\""circleShape\"">"" + i + ""</div>"";
        }
        document.getElementById(""Possibilities"").innerHTML = text;
    }

    function getListOfAvailableOptionsForMyAttempt(x, y) {
        var returnedList = [1, 2, 3, 4, 5, 6, 7, 8, 9];

        var initialI = 0,
            finalI = 0,
            initialJ = 0,
            finalJ = 0;

        if (x < 3) {
            initialI = 0;
            finalI = 3;
        }
        else if (x < 6) {
            initialI = 3;
            finalI = 6;
        }
        else {
            initialI = 6;
            finalI = 9;
        }

        if (y < 3) {
            initialJ = 0;
            finalJ = 3;
        }
        else if (y < 6) {
            initialJ = 3;
            finalJ = 6;
        }
        else {
            initialJ = 6;
            finalJ = 9;
        }

        // Region
        for (var i = initialI; i < finalI; i++) {
            for (var j = initial");
            WriteLiteral(@"J; j < finalJ; j++) {
                if (this.SudokuPuzzle[i][j] != 0) {
                    var index = returnedList.indexOf(this.SudokuPuzzle[i][j]);
                    if (index > -1) {
                        returnedList.splice(index, 1);
                    }
                }
            }
        }

        // Column
        for (var i = 0; i < 9; i++) {
            if (this.SudokuPuzzle[x][i] != 0) {
                    var index = returnedList.indexOf(this.SudokuPuzzle[x][i]);
                    if (index > -1) {
                        returnedList.splice(index, 1);
                    }
                }
        }

        // Column
        for (var i = 0; i < 9; i++) {
            if (this.SudokuPuzzle[i][y] != 0) {
                    var index = returnedList.indexOf(this.SudokuPuzzle[i][y]);
                    if (index > -1) {
                        returnedList.splice(index, 1);
                    }
                }
        }

        return returnedList;");
            WriteLiteral(@"
    } 

    function clearhighLight() {
        for (var i = 0; i < 9; i++) {
                for (var j = 0; j < 9; j++) {
                    document.getElementById(""lc"" + i + j).classList.remove(""highlightZone"");
                }
        }
    }

    function HighlightTargetedZone(x, y) {

        var initialI = 0,
            finalI = 0,
            initialJ = 0,
            finalJ = 0;

        if (x < 3) {
            initialI = 0;
            finalI = 3;
        }
        else if (x < 6) {
            initialI = 3;
            finalI = 6;
        }
        else {
            initialI = 6;
            finalI = 9;
        }

        if (y < 3) {
            initialJ = 0;
            finalJ = 3;
        }
        else if (y < 6) {
            initialJ = 3;
            finalJ = 6;
        }
        else {
            initialJ = 6;
            finalJ = 9;
        }

        for (var i = initialI; i < finalI; i++) {
            for (var j = initialJ; j < finalJ;");
            WriteLiteral(@" j++) {
                document.getElementById(""lc"" + i + j).classList.add(""highlightZone"");
            }
        }
        for (var i = 0; i < 9; i++) {
            document.getElementById(""lc"" + x + i).classList.add(""highlightZone"");
        }

        for (var i = 0; i < 9; i++) {
            document.getElementById(""lc"" + i + y).classList.add(""highlightZone"");
        }


    }

    function checkIfItIsDone() {

         if (this.SudokuSolved == 1) {

            clearhighLight();

            var seconds = Math.floor((Date.now() - starttime) / 1000);

             document.getElementById(""FinalTime"").innerHTML = ""Final time: "" + timeFormat(seconds);
             break;
        }

        var done = 1;

        for (var i = 0; i < 9; i++) {
            for (var j = 0; j < 9; j++) {
                if (SudokuSolution[i][j] != SudokuPuzzle[i][j]) {
                    console.log(""\n\n\n"");
                    console.log(i + "" "" + j);
                    done = 0;
      ");
            WriteLiteral("              break;\r\n                }\r\n            }\r\n        }\r\n        if (done == 1) {\r\n            this.SudokuSolved = 1;\r\n        }\r\n       \r\n        setTimeout(checkIfItIsDone, 1000);\r\n    }\r\n\r\n\r\n    checkIfItIsDone();\r\n\r\n\r\n</script>\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
