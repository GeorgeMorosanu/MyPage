#pragma checksum "E:\Projects\MyPage\MyPage\MyPage\Views\Sudoku\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "5671989e0187a47c15319a6691b6a150544586f5"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Sudoku_Index), @"mvc.1.0.view", @"/Views/Sudoku/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Sudoku/Index.cshtml", typeof(AspNetCore.Views_Sudoku_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "E:\Projects\MyPage\MyPage\MyPage\Views\_ViewImports.cshtml"
using MyPage;

#line default
#line hidden
#line 2 "E:\Projects\MyPage\MyPage\MyPage\Views\_ViewImports.cshtml"
using MyPage.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"5671989e0187a47c15319a6691b6a150544586f5", @"/Views/Sudoku/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a81ad0979f29c6bc8554041958600b33a1e9bb67", @"/Views/_ViewImports.cshtml")]
    public class Views_Sudoku_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 2 "E:\Projects\MyPage\MyPage\MyPage\Views\Sudoku\Index.cshtml"
  
    ViewData["Title"] = "Index";

#line default
#line hidden
            BeginContext(43, 8534, true);
            WriteLiteral(@"
    <div id=""Sudoku"" style=""font-size: 25px"">

    </div>
    <script>

        var SudokuSolution = [];

        for (var i = 0; i < 9; i++) {
            this.SudokuSolution[i] = []
            for (var j = 0; j < 9; j++) {
                this.SudokuSolution[i][j] = 0;
            }
        }

        //console.log(SudokuSolution);

        function generateSudoku() {

            //var randomList = generateRandomList();

            //for (var i = 0; i < 9; i++) {
            //    this.SudokuSolution[0][i] = randomList[i];
            //}

            var generalBreak = 0, generalFailedAttempts = 0;

            for (var i = 0; i < 9; i++) {
                if (generalBreak = 1) {
                    break;
                }
                for (var j = 0; j < 9; j++) {
                    var possibleElements = getListOfAvailableOptions(i, j);

                    if (possibleElements.length == 0) {
                        generalFailedAttempts++;
                   ");
            WriteLiteral(@"     j = 0;
                        removeLine(i);
                        i--;
                        break;
                    }


                    var ok = 0, noAttepts = 0;

                    while (ok == 0) {
                        ok = 1;

                        // To many failed attempts leads to remaking the line
                        if (noAttepts > 50) {
                            removeLine(i);
                            i--;
                            break;
                        }
                        
                        var randomPosition = getRandomElement(possibleElements.length);
                        var possibleChoice = possibleElements[randomPosition];
                        this.SudokuSolution[i][j] = possibleChoice;

                        if (checkPosition(i,j) == 0) {
                            ok = 0;
                            noAttepts++;
                            generalFailedAttempts++;
                        }

       ");
            WriteLiteral(@"                 if (generalFailedAttempts >= 500) {
                            generalBreak = 1;
                            break;
                        }
                    }
                }
            }


            if (generalBreak = 1) {
                for (var i = 0; i < 9; i++) {
                    removeLine(i);
                }
                generateSudoku();
            }

            
        }

        generateSudoku();

        console.log(SudokuSolution);

        console.log(checkSudoku());

        
        for (var k = 0; k < 20; k++) {
            for (var j = 0; j < 9; j++) {
                removeLine(j);
            }
            generateSudoku();
            console.log(""Sudoku No""+k);
        }



        function removeLine(x) {
            for (var i = 0; i < 9; i++) {
                this.SudokuSolution[x][i] = 0;
            }
        }

        function generateRandomList() {
            var returnedList = [1, 2, 3, 4, 5, 6, ");
            WriteLiteral(@"7, 8, 9];
            var firstIndex = 0,
                secondIndex = 0,
                aux=0;
            for (var noShuffles = 0; noShuffles < 20; noShuffles++) {
                firstIndex = getRandomElement(9);
                secondIndex = getRandomElement(9);

                while (secondIndex == firstIndex) {
                    secondIndex = getRandomElement(9);
                }
                aux = returnedList[firstIndex];
                returnedList[firstIndex] = returnedList[secondIndex];
                returnedList[secondIndex] = aux;
            }
            return returnedList;
        }

        function checkSudoku(){
            var ok = 1;
            for (var i = 0; i < 9; i++){
                for (var j = 0; j < 9; j++){
                    if (checkPosition(i, j) == 0) {
                        ok = 0;
                    }
                }
            }
            return ok;
            //console.log(ok);
        }

        function getRandomEl");
            WriteLiteral(@"ement(maxindex) {
            return Math.floor((Math.random() * 100) % maxindex);
        }

        function checkPosition(i, j) {
            if (checkLine(i) == 1 &&
                checkColumn(j) == 1 &&
                checkRegion(i, j) == 1)
                return 1;
            return 0;
        }


        function checkLine(x){
            var myList = [];
            for (var i = 0; i < 9; i++) {
                myList.push(this.SudokuSolution[x][i]);
            }
            //console.log(""checked line: "" + myList);
            return !checkDuplicatesInList(myList);
        }
        
        function checkColumn(x){
            var myList = [];
            for (var i = 0; i < 9; i++) {
                myList.push(this.SudokuSolution[i][x]);
            }
            //console.log(""checked column: "" + myList);
            return !checkDuplicatesInList(myList);
        }

        function checkRegion(x,y){
            var myList = [];

            var initialI = 0");
            WriteLiteral(@",
                finalI = 0,
                initialJ = 0,
                finalJ = 0;

            if (x < 3) {
                initialI = 0;
                finalI = 3;
            }
            else if (x < 6) {
                initialI = 3;
                finalI = 6;
            }
            else {
                initialI = 6;
                finalI = 9;
            }

            if (y < 3) {
                initialJ = 0;
                finalJ = 3;
            }
            else if (y < 6) {
                initialJ = 3;
                finalJ = 6;
            }
            else {
                initialJ = 6;
                finalJ = 9;
            }

            for (i = initialI; i < finalI; i++) {
                for (j = initialJ; j < finalJ; j++) {
                    myList.push(this.SudokuSolution[i][j]);
                }
            }

            //console.log(""checked region: "" + myList);
            return !checkDuplicatesInList(myList);
        }");
            WriteLiteral(@"

        function checkDuplicatesInList(myList) {
            for (var i = 0; i < 8; i++) {
                for (var j = i+1; j < 9; j++) {
                    if (i != j && 
                        myList[i] != 0 &&
                        myList[j] != 0) {
                        // If there are duplicates - line
                        if (myList[i] == myList[j]) {
                            // 1 = there are duplicates
                            return 1;
                        }
                    }
                }
            }
            // 0 - no duplicates
            return 0;
        }

        //Checked
        function getListOfAvailableOptions(i, j) {
            var returnedList = [1, 2, 3, 4, 5, 6, 7, 8, 9];
            var initialI = 0,
                finalI = 0,
                initialJ = 0,
                finalJ = 0;

            if (i < 3) {
                initialI = 0;
                finalI = 3;
            }
            else if (i < 6) {
       ");
            WriteLiteral(@"         initialI = 3;
                finalI = 6;
            }
            else {
                initialI = 6;
                finalI = 9;
            }

            if (j < 3) {
                initialJ = 0;
                finalJ = 3;
            }
            else if (j < 6) {
                initialJ = 3;
                finalJ = 6;
            }
            else {
                initialJ = 6;
                finalJ = 9;
            }

            for (i = initialI; i < finalI; i++) {
                for (j = initialJ; j < finalJ; j++) {
                    if (this.SudokuSolution[i][j] != 0) {
                        var index = returnedList.indexOf(this.SudokuSolution[i][j]);
                        if (index > -1) {
                            returnedList.splice(index, 1);
                        }
                    }
                }
            }
            return returnedList;
        }

        function printSudoku() {
            var text = '';
        ");
            WriteLiteral(@"    for (var i = 0; i < 9; i++) {
                for (var j = 0; j < 9; j++) {
                    text = text + "" "" + this.SudokuSolution[i][j];
                }
                text = text + ""<br />"";
            }
            document.getElementById(""Sudoku"").innerHTML = text;
        }
        printSudoku();

    </script>
");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
